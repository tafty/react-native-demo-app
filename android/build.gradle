// Top-level build file where you can add configuration options common to all sub-projects/modules.
import groovy.json.JsonSlurper

buildscript {
    ext {
        buildToolsVersion = "29.0.2"
        minSdkVersion = 19
        compileSdkVersion = 29
        targetSdkVersion = 29
        kotlinVersion = '1.3.61'
        RNNKotlinVersion = kotlinVersion
        RNNKotlinStdlib = "kotlin-stdlib-jdk8"
    }
    repositories {
        google()
        mavenCentral()
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath("com.android.tools.build:gradle:3.5.3")
        // classpath 'com.google.gms:google-services:4.3.3'
        // classpath 'com.google.firebase:firebase-crashlytics-gradle:2.2.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        mavenLocal()
        maven {
            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
            url("$rootDir/../node_modules/react-native/android")
        }
        maven {
            // Android JSC is installed from npm
            url("$rootDir/../node_modules/jsc-android/dist")
        }
        google()
        maven {
            // All of Detox' artifacts are provided via the npm module
            url "$rootDir/../node_modules/detox/Detox-android"
        }
        jcenter()
        maven { url 'https://www.jitpack.io' }
    }
}

subprojects {
   ext {
      def npmVersion = getNpmVersionArray()
      versionMajor = npmVersion[0]
      versionMinor = npmVersion[1]
      versionPatch = npmVersion[2]
   }

   project.configurations.all {
     resolutionStrategy.eachDependency { details ->
        if (details.requested.group == 'com.android.support'
              && !details.requested.name.contains('multidex') ) {
           details.useVersion rootProject.ext.supportLibVersion
        }
     }
   }

   afterEvaluate {project ->
      if (project.hasProperty("android")) {
         android {
            compileSdkVersion rootProject.ext.compileSdkVersion
            buildToolsVersion rootProject.ext.buildToolsVersion
         }
      }
   }
}

ext {
   buildToolsVersion = "28.0.3"
   minSdkVersion = 19
   compileSdkVersion = 28
   targetSdkVersion = 28
   supportLibVersion = "28.0.0"
}

def getNpmVersion() {
    def inputFile = new File("$rootDir/../package.json")
    def packageJson = new JsonSlurper().parseText(inputFile.text)
    return packageJson["version"]
}

def getNpmVersionArray() { // major [0], minor [1], patch [2]
    def (major, minor, patch) = getNpmVersion().tokenize('.')
    return [Integer.parseInt(major), Integer.parseInt(minor), Integer.parseInt(patch)] as int[]
}
